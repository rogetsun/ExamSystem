/*!
 * ExamSystem - JS for Debug
 * @licence ExamSystem - v1.0.0 (2018-01-30)
 */
/**
 * Created by uv2sun on 15/12/30.
 */
;(function ($) {

    $.extend({
        toJianpin: function (str) {
            return makePy(str);
        }
    });

    // 汉字拼音首字母列表 本列表包含了20902个汉字,用于配合 ToChineseSpell
    //函数使用,本表收录的字符的Unicode编码范围为19968至40869, XDesigner 整理
    var strChineseFirstPY = "";

    //此处收录了375个多音字,数据来自于http://www.51window.net/page/pinyin
    var oMultiDiff = {
        "19969": "DZ",
        "19975": "WM",
        "19988": "QJ",
        "20048": "YL",
        "20056": "SC",
        "20060": "NM",
        "20094": "QG",
        "20127": "QJ",
        "20167": "QC",
        "20193": "YG",
        "20250": "KH",
        "20256": "ZC",
        "20282": "SC",
        "20285": "QJG",
        "20291": "TD",
        "20314": "YD",
        "20340": "NE",
        "20375": "TD",
        "20389": "YJ",
        "20391": "CZ",
        "20415": "PB",
        "20446": "YS",
        "20447": "SQ",
        "20504": "TC",
        "20608": "KG",
        "20854": "QJ",
        "20857": "ZC",
        "20911": "PF",
        "20504": "TC",
        "20608": "KG",
        "20854": "QJ",
        "20857": "ZC",
        "20911": "PF",
        "20985": "AW",
        "21032": "PB",
        "21048": "XQ",
        "21049": "SC",
        "21089": "YS",
        "21119": "JC",
        "21242": "SB",
        "21273": "SC",
        "21305": "YP",
        "21306": "QO",
        "21330": "ZC",
        "21333": "SDC",
        "21345": "QK",
        "21378": "CA",
        "21397": "SC",
        "21414": "XS",
        "21442": "SC",
        "21477": "JG",
        "21480": "TD",
        "21484": "ZS",
        "21494": "YX",
        "21505": "YX",
        "21512": "HG",
        "21523": "XH",
        "21537": "PB",
        "21542": "PF",
        "21549": "KH",
        "21571": "E",
        "21574": "DA",
        "21588": "TD",
        "21589": "O",
        "21618": "ZC",
        "21621": "KHA",
        "21632": "ZJ",
        "21654": "KG",
        "21679": "LKG",
        "21683": "KH",
        "21710": "A",
        "21719": "YH",
        "21734": "WOE",
        "21769": "A",
        "21780": "WN",
        "21804": "XH",
        "21834": "A",
        "21899": "ZD",
        "21903": "RN",
        "21908": "WO",
        "21939": "ZC",
        "21956": "SA",
        "21964": "YA",
        "21970": "TD",
        "22003": "A",
        "22031": "JG",
        "22040": "XS",
        "22060": "ZC",
        "22066": "ZC",
        "22079": "MH",
        "22129": "XJ",
        "22179": "XA",
        "22237": "NJ",
        "22244": "TD",
        "22280": "JQ",
        "22300": "YH",
        "22313": "XW",
        "22331": "YQ",
        "22343": "YJ",
        "22351": "PH",
        "22395": "DC",
        "22412": "TD",
        "22484": "PB",
        "22500": "PB",
        "22534": "ZD",
        "22549": "DH",
        "22561": "PB",
        "22612": "TD",
        "22771": "KQ",
        "22831": "HB",
        "22841": "JG",
        "22855": "QJ",
        "22865": "XQ",
        "23013": "ML",
        "23081": "WM",
        "23487": "SX",
        "23558": "QJ",
        "23561": "YW",
        "23586": "YW",
        "23614": "YW",
        "23615": "SN",
        "23631": "PB",
        "23646": "ZS",
        "23663": "ZT",
        "23673": "YG",
        "23762": "TD",
        "23769": "ZS",
        "23780": "QJ",
        "23884": "QK",
        "24055": "XH",
        "24113": "DC",
        "24162": "ZC",
        "24191": "GA",
        "24273": "QJ",
        "24324": "NL",
        "24377": "TD",
        "24378": "QJ",
        "24439": "PF",
        "24554": "ZS",
        "24683": "TD",
        "24694": "WE",
        "24733": "LK",
        "24925": "TN",
        "25094": "ZG",
        "25100": "XQ",
        "25103": "XH",
        "25153": "PB",
        "25170": "PB",
        "25179": "KG",
        "25203": "PB",
        "25240": "ZS",
        "25282": "FB",
        "25303": "NA",
        "25324": "KG",
        "25341": "ZY",
        "25373": "WZ",
        "25375": "XJ",
        "25384": "A",
        "25457": "A",
        "25528": "SD",
        "25530": "SC",
        "25552": "TD",
        "25774": "ZC",
        "25874": "ZC",
        "26044": "YW",
        "26080": "WM",
        "26292": "PB",
        "26333": "PB",
        "26355": "ZY",
        "26366": "CZ",
        "26397": "ZC",
        "26399": "QJ",
        "26415": "ZS",
        "26451": "SB",
        "26526": "ZC",
        "26552": "JG",
        "26561": "TD",
        "26588": "JG",
        "26597": "CZ",
        "26629": "ZS",
        "26638": "YL",
        "26646": "XQ",
        "26653": "KG",
        "26657": "XJ",
        "26727": "HG",
        "26894": "ZC",
        "26937": "ZS",
        "26946": "ZC",
        "26999": "KJ",
        "27099": "KJ",
        "27449": "YQ",
        "27481": "XS",
        "27542": "ZS",
        "27663": "ZS",
        "27748": "TS",
        "27784": "SC",
        "27788": "ZD",
        "27795": "TD",
        "27812": "O",
        "27850": "PB",
        "27852": "MB",
        "27895": "SL",
        "27898": "PL",
        "27973": "QJ",
        "27981": "KH",
        "27986": "HX",
        "27994": "XJ",
        "28044": "YC",
        "28065": "WG",
        "28177": "SM",
        "28267": "QJ",
        "28291": "KH",
        "28337": "ZQ",
        "28463": "TL",
        "28548": "DC",
        "28601": "TD",
        "28689": "PB",
        "28805": "JG",
        "28820": "QG",
        "28846": "PB",
        "28952": "TD",
        "28975": "ZC",
        "29100": "A",
        "29325": "QJ",
        "29575": "SL",
        "29602": "FB",
        "30010": "TD",
        "30044": "CX",
        "30058": "PF",
        "30091": "YSP",
        "30111": "YN",
        "30229": "XJ",
        "30427": "SC",
        "30465": "SX",
        "30631": "YQ",
        "30655": "QJ",
        "30684": "QJG",
        "30707": "SD",
        "30729": "XH",
        "30796": "LG",
        "30917": "PB",
        "31074": "NM",
        "31085": "JZ",
        "31109": "SC",
        "31181": "ZC",
        "31192": "MLB",
        "31293": "JQ",
        "31400": "YX",
        "31584": "YJ",
        "31896": "ZN",
        "31909": "ZY",
        "31995": "XJ",
        "32321": "PF",
        "32327": "ZY",
        "32418": "HG",
        "32420": "XQ",
        "32421": "HG",
        "32438": "LG",
        "32473": "GJ",
        "32488": "TD",
        "32521": "QJ",
        "32527": "PB",
        "32562": "ZSQ",
        "32564": "JZ",
        "32735": "ZD",
        "32793": "PB",
        "33071": "PF",
        "33098": "XL",
        "33100": "YA",
        "33152": "PB",
        "33261": "CX",
        "33324": "BP",
        "33333": "TD",
        "33406": "YA",
        "33426": "WM",
        "33432": "PB",
        "33445": "JG",
        "33486": "ZN",
        "33493": "TS",
        "33507": "QJ",
        "33540": "QJ",
        "33544": "ZC",
        "33564": "XQ",
        "33617": "YT",
        "33632": "QJ",
        "33636": "XH",
        "33637": "YX",
        "33694": "WG",
        "33705": "PF",
        "33728": "YW",
        "33882": "SR",
        "34067": "WM",
        "34074": "YW",
        "34121": "QJ",
        "34255": "ZC",
        "34259": "XL",
        "34425": "JH",
        "34430": "XH",
        "34485": "KH",
        "34503": "YS",
        "34532": "HG",
        "34552": "XS",
        "34558": "YE",
        "34593": "ZL",
        "34660": "YQ",
        "34892": "XH",
        "34928": "SC",
        "34999": "QJ",
        "35048": "PB",
        "35059": "SC",
        "35098": "ZC",
        "35203": "TQ",
        "35265": "JX",
        "35299": "JX",
        "35782": "SZ",
        "35828": "YS",
        "35830": "E",
        "35843": "TD",
        "35895": "YG",
        "35977": "MH",
        "36158": "JG",
        "36228": "QJ",
        "36426": "XQ",
        "36466": "DC",
        "36710": "JC",
        "36711": "ZYG",
        "36767": "PB",
        "36866": "SK",
        "36951": "YW",
        "37034": "YX",
        "37063": "XH",
        "37218": "ZC",
        "37325": "ZC",
        "38063": "PB",
        "38079": "TD",
        "38085": "QY",
        "38107": "DC",
        "38116": "TD",
        "38123": "YD",
        "38224": "HG",
        "38241": "XTC",
        "38271": "ZC",
        "38415": "YE",
        "38426": "KH",
        "38461": "YD",
        "38463": "AE",
        "38466": "PB",
        "38477": "XJ",
        "38518": "YT",
        "38551": "WK",
        "38585": "ZC",
        "38704": "XS",
        "38739": "LJ",
        "38761": "GJ",
        "38808": "SQ",
        "39048": "JG",
        "39049": "XJ",
        "39052": "HG",
        "39076": "CZ",
        "39271": "XT",
        "39534": "TD",
        "39552": "TD",
        "39584": "PB",
        "39647": "SB",
        "39730": "LG",
        "39748": "TPB",
        "40109": "ZQ",
        "40479": "ND",
        "40516": "HG",
        "40536": "HG",
        "40583": "QJ",
        "40765": "YQ",
        "40784": "QJ",
        "40840": "YK",
        "40863": "QJG"
    };
    //参数,中文字符串
    //返回值:拼音首字母串数组
    function makePy(str) {
        if (typeof(str) != "string")
            throw new Error(-1, "函数makePy需要字符串类型参数!");
        var arrResult = new Array(); //保存中间结果的数组
        for (var i = 0, len = str.length; i < len; i++) {
            //获得unicode码
            var ch = str.charAt(i);
            //检查该unicode码是否在处理范围之内,在则返回该码对映汉字的拼音首字母,不在则调用其它函数处理
            arrResult.push(checkCh(ch));
        }
        //处理arrResult,返回所有可能的拼音首字母串数组
        return mkRslt(arrResult);
    }

    function checkCh(ch) {
        var uni = ch.charCodeAt(0);
        //如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数
        if (uni > 40869 || uni < 19968)
            return ch; //dealWithOthers(ch);
        //检查是否是多音字,是按多音字处理,不是就直接在strChineseFirstPY字符串中找对应的首字母
        return (oMultiDiff[uni] ? oMultiDiff[uni] : (strChineseFirstPY.charAt(uni - 19968)));
    }

    function mkRslt(arr) {
        var arrRslt = [""];
        for (var i = 0, len = arr.length; i < len; i++) {
            var str = arr[i];
            var strlen = str.length;
            if (strlen == 1) {
                for (var k = 0; k < arrRslt.length; k++) {
                    arrRslt[k] += str;
                }
            } else {
                var tmpArr = arrRslt.slice(0);
                arrRslt = [];
                for (k = 0; k < strlen; k++) {
                    //复制一个相同的arrRslt
                    var tmp = tmpArr.slice(0);
                    //把当前字符str[k]添加到每个元素末尾
                    for (var j = 0; j < tmp.length; j++) {
                        tmp[j] += str.charAt(k);
                    }
                    //把复制并修改后的数组连接到arrRslt上
                    arrRslt = arrRslt.concat(tmp);
                }
            }
        }
        return arrRslt;
    }


})(jQuery);

function md5_binary(str) {
    var x = Array();
    var s11 = 7, s12 = 12, s13 = 17, s14 = 22;
    var s21 = 5, s22 = 9, s23 = 14, s24 = 20;
    var s31 = 4, s32 = 11, s33 = 16, s34 = 23;
    var s41 = 6, s42 = 10, s43 = 15, s44 = 21;

    var a = 0x67452301;
    var b = 0xefcdab89;
    var c = 0x98badcfe;
    var d = 0x10325476;

    var x = strToLittleEndianArray(str);

    var strBit = str.length * charBit;

    x[strBit >> 5] |= 0x80 << (strBit & 0x1f);
    x[(((strBit + 64) >>> 9) << 4) + 14] = strBit;

    var len = x.length;

    for (var k = 0; k < len; k += 16) {
        var aa = a, bb = b, cc = c, dd = d;
        a = ff(a, b, c, d, x[k + 0], s11, 0xd76aa478);
        d = ff(d, a, b, c, x[k + 1], s12, 0xe8c7b756);
        c = ff(c, d, a, b, x[k + 2], s13, 0x242070db);
        b = ff(b, c, d, a, x[k + 3], s14, 0xc1bdceee);
        a = ff(a, b, c, d, x[k + 4], s11, 0xf57c0faf);
        d = ff(d, a, b, c, x[k + 5], s12, 0x4787c62a);
        c = ff(c, d, a, b, x[k + 6], s13, 0xa8304613);
        b = ff(b, c, d, a, x[k + 7], s14, 0xfd469501);
        a = ff(a, b, c, d, x[k + 8], s11, 0x698098d8);
        d = ff(d, a, b, c, x[k + 9], s12, 0x8b44f7af);
        c = ff(c, d, a, b, x[k + 10], s13, 0xffff5bb1);
        b = ff(b, c, d, a, x[k + 11], s14, 0x895cd7be);
        a = ff(a, b, c, d, x[k + 12], s11, 0x6b901122);
        d = ff(d, a, b, c, x[k + 13], s12, 0xfd987193);
        c = ff(c, d, a, b, x[k + 14], s13, 0xa679438e);
        b = ff(b, c, d, a, x[k + 15], s14, 0x49b40821);
        a = gg(a, b, c, d, x[k + 1], s21, 0xf61e2562);
        d = gg(d, a, b, c, x[k + 6], s22, 0xc040b340);
        c = gg(c, d, a, b, x[k + 11], s23, 0x265e5a51);
        b = gg(b, c, d, a, x[k + 0], s24, 0xe9b6c7aa);
        a = gg(a, b, c, d, x[k + 5], s21, 0xd62f105d);
        d = gg(d, a, b, c, x[k + 10], s22, 0x2441453);
        c = gg(c, d, a, b, x[k + 15], s23, 0xd8a1e681);
        b = gg(b, c, d, a, x[k + 4], s24, 0xe7d3fbc8);
        a = gg(a, b, c, d, x[k + 9], s21, 0x21e1cde6);
        d = gg(d, a, b, c, x[k + 14], s22, 0xc33707d6);
        c = gg(c, d, a, b, x[k + 3], s23, 0xf4d50d87);
        b = gg(b, c, d, a, x[k + 8], s24, 0x455a14ed);
        a = gg(a, b, c, d, x[k + 13], s21, 0xa9e3e905);
        d = gg(d, a, b, c, x[k + 2], s22, 0xfcefa3f8);
        c = gg(c, d, a, b, x[k + 7], s23, 0x676f02d9);
        b = gg(b, c, d, a, x[k + 12], s24, 0x8d2a4c8a);
        a = hh(a, b, c, d, x[k + 5], s31, 0xfffa3942);
        d = hh(d, a, b, c, x[k + 8], s32, 0x8771f681);
        c = hh(c, d, a, b, x[k + 11], s33, 0x6d9d6122);
        b = hh(b, c, d, a, x[k + 14], s34, 0xfde5380c);
        a = hh(a, b, c, d, x[k + 1], s31, 0xa4beea44);
        d = hh(d, a, b, c, x[k + 4], s32, 0x4bdecfa9);
        c = hh(c, d, a, b, x[k + 7], s33, 0xf6bb4b60);
        b = hh(b, c, d, a, x[k + 10], s34, 0xbebfbc70);
        a = hh(a, b, c, d, x[k + 13], s31, 0x289b7ec6);
        d = hh(d, a, b, c, x[k + 0], s32, 0xeaa127fa);
        c = hh(c, d, a, b, x[k + 3], s33, 0xd4ef3085);
        b = hh(b, c, d, a, x[k + 6], s34, 0x4881d05);
        a = hh(a, b, c, d, x[k + 9], s31, 0xd9d4d039);
        d = hh(d, a, b, c, x[k + 12], s32, 0xe6db99e5);
        c = hh(c, d, a, b, x[k + 15], s33, 0x1fa27cf8);
        b = hh(b, c, d, a, x[k + 2], s34, 0xc4ac5665);
        a = ii(a, b, c, d, x[k + 0], s41, 0xf4292244);
        d = ii(d, a, b, c, x[k + 7], s42, 0x432aff97);
        c = ii(c, d, a, b, x[k + 14], s43, 0xab9423a7);
        b = ii(b, c, d, a, x[k + 5], s44, 0xfc93a039);
        a = ii(a, b, c, d, x[k + 12], s41, 0x655b59c3);
        d = ii(d, a, b, c, x[k + 3], s42, 0x8f0ccc92);
        c = ii(c, d, a, b, x[k + 10], s43, 0xffeff47d);
        b = ii(b, c, d, a, x[k + 1], s44, 0x85845dd1);
        a = ii(a, b, c, d, x[k + 8], s41, 0x6fa87e4f);
        d = ii(d, a, b, c, x[k + 15], s42, 0xfe2ce6e0);
        c = ii(c, d, a, b, x[k + 6], s43, 0xa3014314);
        b = ii(b, c, d, a, x[k + 13], s44, 0x4e0811a1);
        a = ii(a, b, c, d, x[k + 4], s41, 0xf7537e82);
        d = ii(d, a, b, c, x[k + 11], s42, 0xbd3af235);
        c = ii(c, d, a, b, x[k + 2], s43, 0x2ad7d2bb);
        b = ii(b, c, d, a, x[k + 9], s44, 0xeb86d391);

        a = modularAdd(a, aa);
        b = modularAdd(b, bb);
        c = modularAdd(c, cc);
        d = modularAdd(d, dd);
    }
    return Array(a, b, c, d);

    function f(x, y, z) {
        return (x & y) | ((~x) & z);
    };

    function g(x, y, z) {
        return (x & z) | (y & (~z));
    };

    function h(x, y, z) {
        return (x ^ y ^ z);
    };

    function i(x, y, z) {
        return (y ^ (x | (~z)));
    };

    function ff(a, b, c, d, x, s, ac) {
        return modularAdd(rotateLeft(modularAdd(a, modularAdd(modularAdd(f(b, c, d), x), ac)), s), b);
    };

    function gg(a, b, c, d, x, s, ac) {
        return modularAdd(rotateLeft(modularAdd(a, modularAdd(modularAdd(g(b, c, d), x), ac)), s), b);
    };

    function hh(a, b, c, d, x, s, ac) {
        return modularAdd(rotateLeft(modularAdd(a, modularAdd(modularAdd(h(b, c, d), x), ac)), s), b);
    };

    function ii(a, b, c, d, x, s, ac) {
        return modularAdd(rotateLeft(modularAdd(a, modularAdd(modularAdd(i(b, c, d), x), ac)), s), b);
    };
};

function md5(str) {
    return littleEndianArrayToHex(md5_binary(str));
};
/**
 * Add binary-safe padding to a string.
 *
 * @param string the string to add padding
 * @param int number for the string be divisible by
 * @param int the string length
 * @return the padded string
 * @author www.farfarfar.com
 * @version 0.2
 */


var charBit = 8;

var standardPadding = false;

function addPadding(str, divisible, len) {
    if (divisible % len != 0)
        var paddingLen = divisible - (len % divisible);
    else
        var paddingLen = 0;

    if (standardPadding) {
        for (var i = 0; i < paddingLen; i++) {
            str += String.fromCharCode(paddingLen);
        }
    } else {
        for (var i = 0; i < paddingLen; i++) {
            str += String.fromCharCode(0);
        }
    }

    return str;
};

/**
 * Remove binary-safe padding from a string
 *
 * @param string the string to remove padding
 * @param int the string length
 * @return the unpadded string
 * @author www.farfarfar.com
 * @version 0.1
 */

function removePadding(str, len) {
    if (standardPadding) {
        return str.substr(0, len - (str.charCodeAt(str.length - 1)));
    } else {
        return str;
    }
};

/**
 * Converts a string into a little endian binary array
 *
 * @param string the string to convert
 * @return int[]
 * @author www.farfarfar.com
 * @version 0.1
 */

function strToLittleEndianArray(str) {
    var x = Array();
    var mask = (1 << charBit) - 1;

    var len = str.length;

    for (var i = 0, j = 0; j < len; i += charBit) {
        x[i >> 5] |= (str.charCodeAt(j++) & mask) << (i & 0x1f);
    }

    return x;
};

/**
 * Converts a string into a big endian binary array
 *
 * @param string the string to convert
 * @return int[]
 * @author www.farfarfar.com
 * @version 0.1
 */

function strToBigEndianArray(str) {
    var x = Array();
    var mask = (1 << charBit) - 1;

    var len = str.length;

    var i = 0;

    for (var j = 0; j < len; i += charBit) {
        x[i >> 5] |= (str.charCodeAt(j++) & mask) << (32 - charBit - (i & 0x1f));
    }

    return x;
};

/**
 * Converts a little endian binary array into a hex-formatted string
 *
 * @param int[] the array to convert
 * @return string
 * @author www.farfarfar.com
 * @version 0.1
 */

function littleEndianArrayToHex(ar) {
    var charHex = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');

    var str = "";

    var len = ar.length;

    for (var i = 0, tmp = len << 2; i < tmp; i++) {
        str += charHex[((ar[i >> 2] >> (((i & 3) << 3) + 4)) & 0xF)] +
            charHex[((ar[i >> 2] >> ((i & 3) << 3)) & 0xF)];
    }

    return str;
};

/**
 * Converts a big endian binary array into a hex-formatted string
 *
 * @param int[] the array to convert
 * @return string
 * @author www.farfarfar.com
 * @version 0.1
 */

function bigEndianArrayToHex(ar) {
    var charHex = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');

    var str = "";

    var len = ar.length;

    for (var i = 0, tmp = len << 2; i < tmp; i++) {
        str += charHex[((ar[i >> 2] >> (((3 - (i & 3)) << 3) + 4)) & 0xF)] +
            charHex[((ar[i >> 2] >> ((3 - (i & 3)) << 3)) & 0xF)];
    }

    return str;
};

/**
 * @param int the integer to rotate
 * @param int the distance to rotate left
 * @return int
 */

function rotateLeft(val, n) {
    return (val << n) | (val >>> (32 - n));
};

/**
 * @param int the integer to rotate
 * @param int the distance to rotate right
 * @return int
 */

function rotateRight(val, n) {
    return ( val >>> n ) | (val << (32 - n));
};

/**
 * @param int the first integer
 * @param int the second integer
 * @return int
 */

function modularAdd(a, b) {
    var lowerSum = (a & 0xffff) + (b & 0xffff);
    var upperSum = (a >> 16) + (b >> 16) + (lowerSum >> 16);
    return (upperSum << 16) + (lowerSum & 0xffff);
};

/**
 * @param int the first integer
 * @param int the second integer
 * @return int
 */

function modularSubtract(a, b) {
    return modularAdd(a, -b);
};

function binxor(l, r) {
    var x = ((l < 0) ? (l + 4294967296) : l)
        ^ ((r < 0) ? (r + 4294967296) : r);
    return ((x < 0) ? x + 4294967296 : x);
};

/**
 * Unencodes a hex-encoded string to a binary string
 * @param str the string to unencode
 * @return string the unencoded string
 * @author www.farfarfar.com
 */

function hexToStr(str) {
    var charHex = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');
    var stringHex = "0123456789abcdef";

    var out = "";
    var len = str.length;
    str = new String(str);
    str = str.toLowerCase();
    if ((len % 2) == 1) {
        str += "0";
    }
    for (var i = 0; i < len; i += 2) {
        var s1 = str.substr(i, 1);
        var s2 = str.substr(i + 1, 1);
        var index1 = stringHex.indexOf(s1);
        var index2 = stringHex.indexOf(s2);

        if (index1 == -1 || index2 == -1) {
            throw HEX_BROKEN;
        }

        var val = (index1 << 4) | index2;

        out += "" + String.fromCharCode(parseInt(val));
    }
    return out;
};

/**
 * Encodes a string string to a hex-encoded string
 * @param str the string to unencode
 * @return string the unencoded string
 * @author www.farfarfar.com
 */

function strToHex(str) {
    var charHex = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');

    var out = "";
    var len = str.length;
    str = new String(str);
    for (var i = 0; i < len; i++) {
        var s = str.charCodeAt(i);
        var h = "" + charHex[s >> 4] + "" + charHex[0xf & s];

        out += "" + h;
    }
    return out;
};

/**
 * Converts a string to an array of longs
 *
 * @param string the string to convert
 * @return long[]
 * @version 0.1
 */
function strToInt(str) {
    var ar = new Array();

    var len = str.length;

    var i = 0;
    var j = 0;

    do {
        ar[j++] = str.charCodeAt(i++) +
            (str.charCodeAt(i++) << 8) +
            (str.charCodeAt(i++) << 16) +
            (str.charCodeAt(i++) << 24);
    } while (i < len);

    return ar;
};

/**
 * Converts an array of longs to a string
 *
 * @param long[] the array to convert
 * @return string
 * @version 0.1
 */

function intToStr(ar) {
    var len = ar.length;
    for (var i = 0; i < len; i++) {
        ar[i] = String.fromCharCode(ar[i] & 0xff, ar[i] >>> 8 & 0xff,
            ar[i] >>> 16 & 0xff, ar[i] >>> 24 & 0xff);
    }
    return ar.join('');
};



/**
 * Created by uv2sun on 15/7/16.
 * angular $http拦截处理器
 */
angular.module('util.httpInterceptor', [])
    .factory('myHttpInterceptor', ['$q', '$window', 'uvLoading', 'uvTip', function ($q, $window, uvLoading, uvTip) {
        return {
            // optional method
            'request': function (config) {
                uvLoading.loading();
                return config;
            },

            'response': function (response) {
                uvLoading.unloading();
                return response;
            },
            'responseError': function (response) {
                if (response.status === 401) {
                    //TODO 转到登录页面
                    uvTip.showTip('请重新登陆', 3000).then(function () {
                        window.location.href = "login";
                    });
                } else if (response.status == 403) {
                    console.log(response.data);
                } else if (response.status == 500) {
                    uvTip.showTip(response.data);
                } else {

                }
                uvLoading.unloading();
                console.log(response);
                return $q.reject(response);
            }
        };
    }])
    .config(['$httpProvider', function ($httpProvider) {
        $httpProvider.interceptors.push('myHttpInterceptor');
    }]);
/**
 * Created by uv2sun on 15/12/24.
 */
String.prototype.replaceAll = function (AFindText, ARepText) {
    return this.replace(new RegExp(AFindText, "gm"), ARepText)
};
/**
 * Created by uv2sun on 16/1/12.
 * 基于flipclock封装制作
 *
 * uvClockTimestamp: 开始时间戳,单位秒
 * uvClockCountdown: if (uvClockCountDown) 每秒-1; else 每秒+1
 * uvClockFace: 查看flipclock官方的clockFace,
 * uvClockStopCallback: 如果倒计时类,结束时触发flipclock的回调stop,此回调stop内会执行uvClockStopCallback绑定的function
 */
angular.module('uv.directive.clock', [])
    .directive('uvClock', ['$timeout', function ($timeout) {
        return {
            restrict: 'EA',
            replace: true,
            transclude: true,
            scope: {
                uvClockTimestamp: '@',
                uvClockCountdown: '@',
                uvClockFace: '@',
                uvClockStopCallback: '&'
            },
            link: function (scope, elem, attr) {
                var option = {
                    clockFace: scope.uvClockFace || 'TwentyFourHourClock',
                    autoStart: false,
                    countdown: scope.uvClockCountdown && true || false,
                    language: 'zh',
                    callbacks: {
                        stop: function () {
                            console.log('uvClock stoped will callback:' + scope.uvClockStopCallback);
                            scope.uvClockStopCallback && scope.uvClockStopCallback();
                        }
                    }
                };
                var clock = elem.FlipClock(option);
                scope.$watch('uvClockTimestamp', function (v) {
                    if (v && parseInt(v) > 0) {
                        console.log("begin clock");
                        var times = scope.uvClockTimestamp;
                        clock.setTime(times);
                        clock.start();
                    } else {
                        console.log('uvClock:uv-clock-timestamp:' + scope.uvClockTimestamp + ",不满足开启时钟条件");
                    }
                });

            }
        }
    }]);
/**
 * Created by uv2sun on 15/12/15.
 * 基于ngDialog简化版本
 */
angular.module('uv.service.dialog', ['ngDialog'])
    .service('uvDialog', ['$rootScope', 'ngDialog', function ($rootScope, ngDialog) {
        this.show = function (msg) {
            return showDialog(msg);
        };
        this.confirm = function (msg) {
            return confirm(msg);
        };
        this.showTemplate = function (template, scope, data, controller, resolve) {
            return openTemplateDialog(template, scope, data, controller, resolve);
        };
        /**
         * 提示信息确认框
         * @param msg
         * @returns {*} promise
         */
        function showDialog(msg) {
            return ngDialog.open({
                template: '<div class="panel panel-primary" style="border:none;margin:-20px;">' +
                '<div class="panel-body" style="font-size: 13px;">' + msg + '</div>' +
                '<div class="panel-footer" style="overflow: auto;">' +
                '   <button class="btn btn-sm btn-primary pull-right" ng-click="closeThisDialog(1)">确定</button>' +
                '</div>' +
                '</div>',
                plain: true, showClose: false
            }).closePromise.then(function (data) {
                return data.value;
            });
        }

        /**
         * 确认信息提示框 promise dialog
         * @returns {*} promise 1:确定,其他取消
         */
        function confirm(msg) {
            return ngDialog.open({
                template: '<div class="panel panel-primary" style="border:none;margin:-20px;">' +
                '<div class="panel-body" style="font-size: 13px;">' + msg + '</div>' +
                '<div class="panel-footer" style="overflow: auto;">' +
                '   <button class="btn btn-sm btn-default pull-right" style="margin-left: 10px;" ng-click="closeThisDialog()">取消</button>' +
                '   <button class="btn btn-sm btn-primary pull-right" ng-click="closeThisDialog(1)">确定</button>' +
                '</div>' +
                '</div>',
                plain: true, showClose: false
            }).closePromise.then(function (data) {
                return data.value;
            });
        }

        /**
         * 自定义模版dialog
         * @param template 模版名称 <script type="text/ng-template" id="模版名称"></script>
         * @param scope 父级scope
         * @param data  jsonObject,key为模版scope[key]
         * @param controller 自定义controller名称
         * @param resolve resolve数组
         * @returns {*}
         */
        var openTemplateDialog = function (template, scope, data, controller, resolve) {
            if (!template) return;
            angular.forEach(data, function (v, k) {
                scope[k] = v;
            });
            var option = {scope: scope, closeByDocument: false, showClose: false, overlay: true, template: template};
            if (controller)option.controller = controller;
            if (resolve)option.resolve = resolve;
            return ngDialog.open(option).closePromise.then(function (data) {
                angular.forEach(data, function (v, k) {
                    delete scope[k];
                });
                return data.value;
            });
        };
    }]);
/**
 * Created by uv2sun on 15/7/13.
 */

angular.module('uv.fixed', [])
    /**
     * 需要滚动粘帖顶部的元素添加uv-sticky
     * 需要指定粘帖时距离顶部距离的给uv-sticky赋值，默认10个像素。注意赋值时不带单位px
     *
     * 注意：依赖jQuery
     *
     * 实现逻辑：
     *      1、将需要滚动时，粘帖顶部的元素前面插入一个占位元素，并设置样式。
     *      2、将粘帖元素加在body上，并设置为绝对定位
     *      3、给粘帖元素按占位元素的offset设置，并设置其max-height不可超出网页可是范围。
     *      4、重新粘帖元素的高度设置占位元素的高度
     *      5、增加滚动监听，当滚动高度大于粘帖元素在非fixed时可滚动的高度，改为fixed定位；否则absolute到body
     * */
    .directive('uvSticky', ['$document', '$timeout', function ($document, $timeout) {
        return {
            restrict: 'EA',
            replace: true,
            transclude: true,
            template: "<div ng-transclude></div>",
            scope: {},
            link: function (scope, elem, attr) {
                /***
                 * document.onready时，获取元素offset定位时，网页css渲染未必完成，所以获取的offset可能是错误的。
                 * window.load或者放在$timeout可解决。
                 */
                $timeout(function () {


                    /** 临时占位元素 */
                    var tElem = angular.element("<div></div>")
                        .attr('style', elem.attr('style'))
                        .attr('class', elem.attr('class'))
                        .css('width', elem.css('width'))
                        //                                    .css('height', elem.css('auto'))
                        .css('display', elem.css('display') || 'block')
                        .css('position', elem.css('position'))
                        .css('opacity', '0')
                        .insertBefore(elem);
                    var background = elem.css('background');
                    /** 粘帖顶部后，距离顶部高度位置 */
                    scope.uvStickyTop = parseInt(attr.uvSticky || 10);
                    //粘帖元素本身初始状态应该的高度，和替换它的占位元素一致。
                    var initTop = tElem.offset().top,
                    //左边距离
                        initLeft = tElem.offset().left,
                    //粘帖元素滚动时，不做fixed定位可滚动高度 ＝ 粘帖元素初始高度 - 元素本身margin-top - 粘帖时顶部高度
                        canScrollTop = initTop - parseInt(elem.css('margin-top')) - scope.uvStickyTop;

                    /** 粘帖顶部元素 */
                    elem.css('position', 'absolute')
                        .css('overflow', 'auto')
                        .css('max-height', angular.element(window).height() - initTop)
                        .css('width', tElem.css('width'))
                        .attr('class', tElem.attr('class'))
                        .css('background', tElem.css('background'))
                        .css('border', tElem.css('border'))
                        //.appendTo('body')
                        .offset(tElem.offset());

                    tElem.css('height', elem.css('height'))
                        .css('border', 'none')
                        .css('background', 'rgba(0,0,0,0)');

                    $document.scroll(function () {
                        /***
                         * 如果滚动高度大于可滚动高度，做fixed定位；否则按占位元素的offset绝对定位到body
                         */
                        if ($document.scrollTop() > canScrollTop) {
                            elem.css('position') != 'fixed' &&
                            elem.css('position', 'fixed')
                                .css({top: scope.uvStickyTop, left: initLeft})
                                .css('z-index', '9999');
                        } else {
                            elem.css('position') == 'fixed' && elem.css('position', 'absolute');
                            elem.offset().top != initTop && elem.offset(tElem.offset()).css('z-index', 1);
                        }
                    });

                });

            }

        }
    }])
    /***
     * 获取各种高、度宽度
     */
    .service('WHService', ['$window', '$document', function ($window, $document) {
        function GetInfo() {
            var s = "";
            s += "\r\ndocument.body.clientWidth :网页可见区域宽：" + document.body.clientWidth;
            s += "\r\ndocument.body.clientHeight:网页可见区域高：" + document.body.clientHeight;
            s += "\r\ndocument.body.offsetWidth :网页可见区域宽：" + document.body.offsetWidth + " (包括边线和滚动条的宽)";
            s += "\r\ndocument.body.offsetHeight:网页可见区域高：" + document.body.offsetHeight + " (包括边线的宽)";
            s += "\r\ndocument.body.scrollWidth :网页正文全文宽：" + document.body.scrollWidth;
            s += "\r\ndocument.body.scrollHeight:网页正文全文高：" + document.body.scrollHeight;
            s += "\r\ndocument.body.scrollTop   :网页被卷去的高(ff)：" + document.body.scrollTop;
            s += "\r\ndocument.documentElement.scrollTop:网页被卷去的高(ie)：" + document.documentElement.scrollTop;
            s += "\r\ndocument.body.scrollLeft  :网页被卷去的左：" + document.body.scrollLeft;
            s += "\r\nwindow.screenTop          :网页正文部分上：" + window.screenTop;
            s += "\r\nwindow.screenLeft         :网页正文部分左：" + window.screenLeft;
            s += "\r\nwindow.screen.height      :屏幕分辨率的高：" + window.screen.height;
            s += "\r\nwindow.screen.width       :屏幕分辨率的宽：" + window.screen.width;
            s += "\r\nwindow.screen.availHeight :屏幕可用工作区高度:" + window.screen.availHeight;
            s += "\r\nwindow.screen.availWidth  :屏幕可用工作区宽度：" + window.screen.availWidth;
            s += "\r\nwindow.screen.colorDepth  :你的屏幕设置是 " + window.screen.colorDepth + " 位彩色";
            s += "\r\nwindow.screen.colorDepth  :你的屏幕设置 " + window.screen.deviceXDPI + " 像素/英寸";
            console.log(s)
        }

        return {getWH: GetInfo}
    }]);

/**
 * Created by uv2sun on 15/2/15.
 * this depend jQuery
 *
 *
 *
 app.run(['$rootScope', 'uvLoading', function ($rootScope, ul) {
                $rootScope.$on('$stateChangeStart',
                        function (event, toState, toParams, fromState, fromParams) {
                            ul.loading();
                        });
                $rootScope.$on('$stateChangeSuccess',
                        function (event, toState, toParams, fromState, fromParams) {
                            ul.unloading();
                        })
            }]);
 */
angular.module('uv.service.loading', [])
    .run(['$templateCache', '$rootScope', 'uvLoading', function ($templateCache, $rootScope, uvLoading) {
        $rootScope._uv_loading = {show: false};
        $templateCache.put(
            'uv-loading.html',
            '<div ng-show="_uv_loading.show" style="z-index: 9999999998;">' +
            '<div' +
            '   style="z-index: 9999999999;' +
            '       position: fixed;' +
            '       top:50%;' +
            '       left:50%;' +
            '       height:110px;' +
            '       margin-top: -55px;' +
            '       width:114px;' +
            '       background-color:#000;' +
            '       color:#f2f2f2;' +
            '       margin-left: -57px;' +
            '       border-radius:6px;' +
            '       padding: 5px;' +
            '   ">' +
            '<img src="' + uvLoading._gif_path + '">' +
            '</div>' +
            '<div style="position: fixed;top:0;left:0;width: 100%;height:100%;background-color: rgba(0,0,0,0.3);z-index: 99999;"></div>' +
            '</div>'
        );
        angular.element($templateCache.get('uv-loading.html')).appendTo(angular.element('body'));

    }])
    .provider('uvLoading', [function () {
        var loading_icon = "";
        this.setLoadingGif = function (path) {
            loading_icon = path;
        };
        var timer;
        this.$get = ['$rootScope', '$timeout', function ($rootScope, $timeout) {
            return {
                loading: function (minisecond) {
                    this._loadCount++;
                    $rootScope._uv_loading.show = true;
                    if (minisecond) {
                        var _this = this;
                        timer = $timeout(function () {
                            _this.unloading();
                        }, minisecond);
                    }
                },
                unloading: function () {
                    if (--this._loadCount <= 0)
                        $rootScope._uv_loading.show = false;
                },
                _gif_path: loading_icon,
                _loadCount: 0
            };
        }];
    }])
    //.service('uvLoading', ['$rootScope', '$timeout', function ($rootScope, $timeout) {
    //    var timer;
    //    return {
    //        loading: function (minisecond) {
    //            $rootScope._uv_loading.show = true;
    //            if (minisecond) {
    //                var _this = this;
    //                timer = $timeout(function () {
    //                    _this.unloading();
    //                }, minisecond);
    //            }
    //        },
    //        unloading: function () {
    //            $rootScope._uv_loading.show = false;
    //        }
    //    }
    //}])
;
/**
 * Created by uv2sun on 15/12/31.
 * 依赖:
 *      bootstrap-datetimepicker.
 *      https://github.com/smalot/bootstrap-datetimepicker
 *
 *      注意:该插件在页面缩小存在滚动时,弹出选择日期框定位有问题.
 *
 *  uv-time-picker 或 uv-date-time-picker ="timestamp" 或者没有值时,
 *      ng-model获得的值为毫秒timestamp
 *
 */
angular.module('uv.directive.datetimepicker', [])
    .directive('uvTimePicker', ['$timeout', function ($timeout) {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, element, attrs, ngModelCtrl) {
                /**
                 * 显示在input的日期时间格式
                 * @type {string}
                 */
                var format = 'hh:ii';

                element.datetimepicker({
                    language: 'zh-CN',
                    startView: 1,
                    autoclose: true,
                    format: format,
                    showMeridian: true
                }).on('changeDate', function (e) {
                    var time = e.date.getTime();
                    time -= 1000 * 60 * 60 * 8;//处理时区,不需要语言为zh-CN时默认+8时区
                    ngModelCtrl.$setViewValue(time);
                    scope.$apply();
                });
                /**
                 * scope中ngModel绑定的数据timestamp值
                 */
                var watch = scope.$watch(attrs.ngModel, function (nv) {
                    if (nv) {
                        /**
                         * 生成ngModel绑定的值对应的Date对象
                         * @type {Date}
                         */
                        var initDate = new Date();
                        initDate.setTime(nv);
                        /**
                         * 在angular完成所有操作后,按上面datetimepicker配置的规则更新显示和数据
                         */
                        element.datetimepicker('update', initDate);
                    }
                    watch();//取消$watch
                });

            }
        };
    }])
    .directive('uvDateTimePicker', ['$timeout', function ($timeout) {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, element, attrs, ngModelCtrl) {
                if (!ngModelCtrl)return;
                /**
                 * 显示在input的日期时间格式
                 * @type {string}
                 */
                var format = 'yyyy-mm-dd hh:ii';

                /**
                 * 配置bootstrap-datetimepicker
                 */
                element.datetimepicker({
                    language: 'zh-CN',
                    format: format,
                    autoclose: true,
                    showMeridian: true,
                    //initialDate: initDateStr,//怀疑因为angular导致element.val()数据又被覆盖
                    todayHighlight: true
                }).on('changeDate', function (e) {
                    var time = e.date.getTime();
                    time -= 1000 * 60 * 60 * 8;//处理时区,不需要语言为zh-CN时默认+8时区
                    ngModelCtrl.$setViewValue(time);
                    scope.$apply();
                });

                var watch = scope.$watch(attrs.ngModel, function (nv) {
                    if (nv) {
                        /**
                         * 生成ngModel绑定的值对应的Date对象
                         * @type {Date}
                         */
                        var initDate = new Date();
                        initDate.setTime(nv);
                        /**
                         * 在angular完成所有操作后,按上面datetimepicker配置的规则更新显示和数据
                         */
                        element.datetimepicker('update', initDate);
                    }
                    watch();//取消$watch
                });


            }
        };
    }]);



/**
 * Created by uv2sun on 15/3/16.
 * uvTip服务：
 *      showTip(content, minisecond)：
 *          @param content 现实内容，可以html代码
 *          @param minisecond 多少毫秒以后自动小时
 *
 *      hideTip：
 *          隐藏提示
 *
 * 20151223 update by uv2sun:
 *      增加showTip后,未指定延迟消失时,可以click触发hideTip.同时仍然支持promise用法then
 */
angular.module('uv.service.tip', [])
    .run(['$templateCache', '$rootScope', 'uvTip', function ($templateCache, $rootScope, uvTip) {
        $rootScope._uv_tip = {show: false};
        $templateCache.put(
            'uv-tip.html',
            '<div ng-show="_uv_tip.show" ng-click="_hideTip()" style="top:0;left:0;position: fixed;width:100%;height: 100%;background-color: rgba(0,0,0,0.5);z-index:99999;">' +
            '<div id="_uv_tip_father" style="top:60px;position: relative;">' +
            '<div id="_uv_tip" class="_uv_tip text-info" style="margin:auto;background-color:rgba(244,244,244,1);position: relative;max-width: 80%;min-width: 10%;width:30%;-moz-border-radius: 6px;-webkit-border-radius: 6px;border-radius: 6px;padding:10px;text-align: center;">' +
            '</div>' +
            '</div>' +
            '</div>'
        );
        $rootScope._uv_tip.rootElement = angular.element($templateCache.get('uv-tip.html'));
        $rootScope._uv_tip.contentElement = $rootScope._uv_tip.rootElement.children("#_uv_tip_father").children("#_uv_tip");
        $rootScope._uv_tip.rootElement.appendTo(angular.element('body'));
        $rootScope._hideTip = function () {
            uvTip.hideTip();
        };
        console.log($rootScope._uv_tip.contentElement.html());
    }])
    .service('uvTip', ['$rootScope', '$timeout', '$q', function ($rootScope, $timeout, $q) {
        var timer, defer;
        return {
            /**
             *
             * @param content 现实内容，可以html代码
             * @param minisecond 多少毫秒以后自动小时
             */
            showTip: function (content, minisecond) {
                $rootScope._uv_tip.contentElement.html(content);
                $rootScope._uv_tip.show = true;
                defer = $q.defer();
                if (minisecond) {
                    var _this = this;
                    timer = $timeout(function () {
                        _this.hideTip();
                    }, minisecond);
                }
                return defer.promise;
            },
            /**
             * 隐藏提示
             */
            hideTip: function () {
                $rootScope._uv_tip.show = false;
                if (defer) {
                    defer.resolve(true);
                }
            }
        }
    }]);

/*--------------------------------------------------|
 | dTree 2.05 | www.destroydrop.com/javascript/tree/ |
 |---------------------------------------------------|
 | Copyright (c) 2002-2003 Geir Landr				|
 |                                                   |
 | This script can be used freely as long as all     |
 | copyright messages are intact.                    |
 |                                                   |
 | Updated: 17.04.2003                               |
 |--------------------------------------------------*/
/**
 songyw modify 2013/3/12 10:57:32
 for
 1、取消通过cookie作为中间存储，记录选中、打开状态，修改为 为dTree 增加存储区完成以上功能
 具体实现：通过selectedNode数组记录生成dTree时，存储所有node数组aNodes[]的数组下标,
 因为本树生成时，点击某节点时调用s()函数传入的就是这个数组下标
 2、增加单个结点单击 一次选中，再单击一次取消选中的功能。
 3、增加多选功能，将 selectedNode 修改为数组，用于存储选中节点。
 4、外部程序调用add节点时，增加节点是否选中功能.

 实现：
 1、增加add入参isSelected
 2、赋给Node._is
 3、调用addNode增加节点时，修改选中节点selectedNode数组。同时递归打开父节点
 5、增加用户树结构其他数据存放区域

 modify list:
 getSelected                function    modify      支持多选,并将返回修改为json对象或json对象数组，
 eg:[{'id':'idvalue1','name','nvalue1'},{'id':'idvalue2','name','nvalue2'}]
 s                          function    modify      增加单个结点单击 一次选中，再单击一次取消选中的功能，并操作选中数组
 dTree.config.multiSelect   var         add         用于多选标志位
 clearSelected              function    add         清除选中节点
 removeSeletedNode          function    add         从dTree的中间存储空间删除指定选中的node节点对应于aNodes[]的下标，并返回修改后的数组长度
 addSelectedNode            function    add         给dTree的中间存储空间增加选中的node节点对应于aNodes[]的下标
 dTree.selectedNode         var         modify      所有涉及使用此变量的地方都需要修改，所以增加function isSelectedNode()
 isSelectedNode             function    add         用于替换判断selectedNode值的地方
 addNode                    function    modify      外部程序调用add节点时，增加节点是否选中功能
 Node.userData              var         add         用于存放用户树结构复杂的数据。同时在getSelect中返回给用户。
 */


var _TREE_DEBUG = false;


// Node object
/**
 默认值的书写规则（从左至右，依次省略）
 即 tree.add(id,pid,name,url);后面5个参数可以省略
 2：有间隔时的默认值（如存在第6个参数，但第5个参数想用默认值）
 即 tree.add(id,pid,name,url,"",target);必须这样写
 其他 tree.add(id,pid,name,url,"","","","",true);
 */
function Node(id, pid, name, url, title, target, icon, iconOpen, open, isSelected, tmpData) {

    this.id = id;					//node节点ID
    this.pid = pid;					//node节点父节点ID
    this.name = name;				//node节点显示名称
    this.url = url;					//node节点url，可以为javascript:function(){}
    this.title = title;				//node节点鼠标放上去时显示的提示内容
    this.target = target;			//节点链接所打开的目标frame（如框架目标mainFrame或是_blank,_self之类）
    this.icon = icon;				//节点关闭时的显示图片的路径
    this.iconOpen = iconOpen;		//节点打开时的显示图片的路径
    this._io = open || false; 		//是否展开标志
    this._is = !!isSelected;	    //是否选中
    this._ls = false;				//if a node has any children and if it is the last sibling
    this._hc = false;				//is or not father node
    this._ai = 0;					//节点顺序，在aNodes[]数组中的位置
    this._p;						//父节点node对象
    this.userData = tmpData || null;//用户树节点的复杂数据信息
}

// Tree object, songyw add multiSelect flag 2013/3/12 11:15:56
function dTree(objName, iconPrefix) {
    this.config = {
        target: null,
        folderLinks: true,
        useSelection: true,
        useLines: true,
        useIcons: true,
        useStatusText: false,
        closeSameLevel: false,
        inOrder: false,
        multiSelect: false,
        checkbox: false    // 检查是否有复选框
    };
    this.icon = {
        root: iconPrefix + '/folderopen.gif',
        folder: iconPrefix + '/folder.gif',
        folderOpen: iconPrefix + '/folderopen.gif',
        node: iconPrefix + '/page.gif',
        empty: iconPrefix + '/empty.gif',
        line: iconPrefix + '/line.gif',
        join: iconPrefix + '/join.gif',
        joinBottom: iconPrefix + '/joinbottom.gif',
        plus: iconPrefix + '/plus.gif',
        plusBottom: iconPrefix + '/plusbottom.gif',
        minus: iconPrefix + '/minus.gif',
        minusBottom: iconPrefix + '/minusbottom.gif',
        nlPlus: iconPrefix + '/nolines_plus.gif',
        nlMinus: iconPrefix + '/nolines_minus.gif'
    };
    this.obj = objName;
    this.aNodes = [];
    this.aIndent = [];
    this.root = new Node(-1);
    this.selectedNode = []; //songyw modify 原始为对象或null，修改为[]数组，支持多选用的中间存储区
    this.selectedFound = false;
    this.completed = false;
}


// Adds a new node to the node array songyw modify for 使用方便
dTree.prototype.addDetail = function (id, pid, name, url, title, isSelected, userData, open, target, icon, iconOpen) {
    this.aNodes[this.aNodes.length] = new Node(id, pid, name, url, title, target, icon, iconOpen, open, isSelected, userData);
};
// Adds a new node to the node array songyw add for 简化使用
dTree.prototype.add = function (id, pid, name, url, title, isSelected, userData, open) {
    this.aNodes[this.aNodes.length] = new Node(id, pid, name, url, title, "", "", "", open, isSelected, userData);
};

//songyw add for  初始化树，主要是先对默认选中节点的父节点执行打开操作。通过遍历 selectedNode 数组 2013/3/12 15:17:39
dTree.prototype.init = function () {
    //alert('init');
    for (var i = 0; i < this.selectedNode.length; i++) {
        this.openTo(this.aNodes[this.selectedNode[i]].pid == -1 ? this.aNodes[this.selectedNode[i]].id : this.aNodes[this.selectedNode[i]].pid);
    }
};

// Open/close all nodes
dTree.prototype.openAll = function () {
    this.oAll(true);
};
dTree.prototype.closeAll = function () {
    this.oAll(false);
};

// Outputs the tree to the page
dTree.prototype.toString = function () {
    var str = '<div class="dtree">';
    if (document.getElementById) {
        str += this.addNode(this.root);//是个递归操作
    } else str += 'Browser not supported.';
    str += '</div>';
    //if (!this.selectedFound) this.selectedNode = []; // songyw modify 无逻辑意义，注视掉。
    this.completed = true;
    return str;
};

// Creates the tree structure songyw modify for 外部程序调用add节点时，增加节点是否选中功能 2013/3/12 13:51:21
dTree.prototype.addNode = function (pNode) {
    var str = '';
    var n = 0;
    if (this.config.inOrder) n = pNode._ai;
    for (n; n < this.aNodes.length; n++) {
        if (this.aNodes[n].pid == pNode.id) {
            var cn = this.aNodes[n];
            cn._p = pNode;
            cn._ai = n;
            this.setCS(cn);
            if (!cn.target && this.config.target) cn.target = this.config.target;
            if (!this.config.folderLinks && cn._hc) cn.url = null;
            //songyw modify for selectedNode 支持多选问题
            //if (this.config.useSelection && cn.id == this.selectedNode && !this.selectedFound) {
            //
            //	cn._is = true;
            //	this.selectedNode = n;
            //	this.selectedFound = true;
            //}
            //
            if (cn._is) {
                this.addSelectedNode(n);
            }

            str += this.node(cn, n);
            if (cn._ls) break;
        }
    }
    return str;
};

// Creates the node icon, url and text
dTree.prototype.node = function (node, nodeId) {
    var str = '<div class="dTreeNode">' + this.indent(node, nodeId);
    if (this.config.useIcons) {
        if (!node.icon) node.icon = (this.root.id == node.pid) ? this.icon.root : ((node._hc) ? this.icon.folder : this.icon.node);
        if (!node.iconOpen) node.iconOpen = (node._hc) ? this.icon.folderOpen : this.icon.node;
        if (this.root.id == node.pid) {
            node.icon = this.icon.root;
            node.iconOpen = this.icon.root;
        }
        str += '<img id="i' + this.obj + nodeId + '" src="' + ((node._io) ? node.iconOpen : node.icon) + '" alt="" />';
    }
    //添加上复选框
    if (this.config.checkbox == true) {
        //	alert(nodeId+","+json2string(node._p));
        //	alert(node._p._ai);
        str += '<input type="checkbox" name="checkboxValues"  style="cursor:pointer;" value="' + node.id + '" id="c' + this.obj + node.id
            + '" onClick="javascript:' + this.obj + '.cc(&quot;' + node._ai
            + '&quot;,&quot;' + node._p._ai + '&quot;);" ' + (node._is ? "checked" : '') + '/>';
    }
    if (!this.config.multiSelect || node.url) {
        str += '<a id="s' + this.obj + nodeId + '" class="' + ((this.config.useSelection) ? ((node._is ? 'nodeSel' : 'node')) : 'node') + '" href="' + (node.url || 'javascript:;') + '"';
        if (node.title) str += ' title="' + node.title + '"';
        if (node.target) str += ' target="' + node.target + '"';
        if (this.config.useStatusText) str += ' onmouseover="window.status=\'' + node.name + '\';return true;" onmouseout="window.status=\'\';return true;" ';
        if (this.config.useSelection && ((node._hc && this.config.folderLinks) || !node._hc))
            str += ' onclick="javascript: ' + this.obj + '.s(' + nodeId + ');"';
        str += '>';
    }
    else if ((!this.config.folderLinks || !node.url) && node._hc && node.pid != this.root.id)
        str += '<a href="javascript: ' + this.obj + '.o(' + nodeId + ');" class="node">';
    str += node.name;
    if (!this.config.multiSelect || node.url || ((!this.config.folderLinks || !node.url) && node._hc)) str += '</a>';
    str += '</div>';
    if (node._hc) {
        str += '<div id="d' + this.obj + nodeId + '" class="clip" style="display:' + ((this.root.id == node.pid || node._io) ? 'block' : 'none') + ';">';
        str += this.addNode(node);
        str += '</div>';
    }
    this.aIndent.pop();
    return str;
};

// Adds the empty and line icons
dTree.prototype.indent = function (node, nodeId) {
    var str = '';
    if (this.root.id != node.pid) {
        for (var n = 0; n < this.aIndent.length; n++)
            str += '<img src="' + ( (this.aIndent[n] == 1 && this.config.useLines) ? this.icon.line : this.icon.empty ) + '" alt="" />';
        (node._ls) ? this.aIndent.push(0) : this.aIndent.push(1);
        if (node._hc) {
            str += '<a href="javascript: ' + this.obj + '.o(' + nodeId + ');"><img id="j' + this.obj + nodeId + '" src="';
            if (!this.config.useLines) str += (node._io) ? this.icon.nlMinus : this.icon.nlPlus;
            else str += ( (node._io) ? ((node._ls && this.config.useLines) ? this.icon.minusBottom : this.icon.minus) : ((node._ls && this.config.useLines) ? this.icon.plusBottom : this.icon.plus ) );
            str += '" alt="" /></a>';
        } else str += '<img src="' + ( (this.config.useLines) ? ((node._ls) ? this.icon.joinBottom : this.icon.join ) : this.icon.empty) + '" alt="" />';
    }
    return str;
};

// Checks if a node has any children and if it is the last sibling
dTree.prototype.setCS = function (node) {
    var lastId;
    for (var n = 0; n < this.aNodes.length; n++) {
        if (this.aNodes[n].pid == node.id) node._hc = true;
        if (this.aNodes[n].pid == node.pid) lastId = this.aNodes[n].id;
    }
    if (lastId == node.id) node._ls = true;
};

// Returns the selected node
//songyw modify 2013/3/12 12:20:54 for 支持多选,并将返回修改为json对象或json对象数组
dTree.prototype.getSelected = function () {
    //return (sn) ? sn : null;
    if (!this.selectedFound) return null;
    if (this.config.multiSelect) {
        var retJson = [];
        for (var i = 0; i < this.selectedNode.length; i++) {
            var tmpNode = this.aNodes[this.selectedNode[i]];
            if (tmpNode.userData) {
                retJson[i] = tmpNode.userData;
            } else {
                retJson[i] = {'id': tmpNode.id, 'name': tmpNode.name, 'userData': tmpNode.userData};
            }
        }
        return retJson;
    } else {
        var tmpNode = this.aNodes[this.selectedNode[0]];
        if (tmpNode.userData) {
            return [tmpNode.userData];
        } else {
            return [{'id': tmpNode.id, 'name': tmpNode.name}];
        }
    }

};
//获取选中节点的路径
dTree.prototype.getSelectedNodePath = function () {
    var path;
    if (!this.selectedFound) return null;
    if (this.config.multiSelect) {

    } else {
        var tmpNode = this.aNodes[this.selectedNode[0]];
        //path="["+tmpNode.id+"]["+tmpNode.pid+"]"+tmpNode.name;
        path = tmpNode.name;
        while (tmpNode.pid != -1) {
            var parentNode = tmpNode._p;
            //path="["+parentNode.id+"]["+parentNode.pid+"]"+parentNode.name+" > "+path;
            path = parentNode.name + path;
            tmpNode = parentNode;
        }
    }
    return path;
};

//songyw add for 从dTree的中间存储空间删除指定选中的node节点对应于aNodes[]的下标，并返回修改后的数组长度 2013/3/12 11:53:09,
dTree.prototype.removeSeletedNode = function (value) {
    this.aNodes[value]._is = false;
    for (var i = 0; i < this.selectedNode.length; i++) {
        if (this.selectedNode[i] == value) {
            this.selectedNode.splice(i, 1);
            break;
        }
    }
    if (this.selectedNode.length == 0) this.selectedFound = false;
    return this.selectedNode.length;
};

//songyw add for 给dTree的中间存储空间增加选中的node节点对应于aNodes[]的下标 2013/3/12 12:06:26
dTree.prototype.addSelectedNode = function (value) {
    //先判断是否已经存在于selectedNode数组
    for (var i = 0; i < this.selectedNode.length; i++) {
        if (this.selectedNode[i] == value) return this.selectedNode.length;
    }
    this.aNodes[value]._is = true;
    this.selectedNode[this.selectedNode.length] = value;
    this.selectedFound = true;
    return this.selectedNode.length;
};

dTree.prototype.isSelectedNode = function (id) {
    for (var i = 0; i < this.selectedNode.length; i++) {
        if (this.selectedNode[i] == id) return true;
    }
    return false;
}

// Highlights the selected node songyw modify for 支持多选，和反复取消、选中一个节点
dTree.prototype.s = function (id) {
    if (!this.config.useSelection) return;
    var cn = this.aNodes[id];
    if (cn._hc && !this.config.folderLinks) return;

    //songyw modify to support multi select 2013/3/12 11:48:47
    //if (this.selectedNode != id) {
    //    if (this.selectedNode || this.selectedNode == 0) {
    //        var eOld = document.getElementById("s" + this.obj + this.selectedNode);
    //        eOld.className = "node";
    //    }
    //    var eNew = document.getElementById("s" + this.obj + id);
    //    eNew.className = "nodeSel";
    //    this.selectedNode = id;
    //
    //}
    if (cn._is) {

        var eOld = document.getElementById("s" + this.obj + id);
        eOld.className = "node";
        this.removeSeletedNode(id);
        cn._is = false;

    }
    //songyw add for 单击节点高亮显示，表示选中，再次单击表示取消高亮选中 2013/3/12 10:56:46 begin
    else {
        //是否多选判断
        if (!this.config.multiSelect && this.selectedFound) {
            for (var i = 0; i < this.selectedNode.length;) {//因为removeSeletedNode会改变数组长度，所以不用i++，其实是一直从左边删除i=0的记录
                var eOld = document.getElementById("s" + this.obj + this.selectedNode[i]);

                eOld.className = "node";
                this.aNodes[this.selectedNode[i]]._is = false;
                this.removeSeletedNode(this.selectedNode[i]);
            }

        }
        var eNew = document.getElementById("s" + this.obj + id);
        eNew.className = "nodeSel";
        cn._is = true;
        this.addSelectedNode(id);
    }
    //songyw add for 单击节点高亮显示，表示选中，再次单击表示取消高亮选中 2013/3/12 10:56:46 end

};

//songyw add for 清除选中节点
dTree.prototype.clearSelected = function () {
    for (var i = 0; i < this.selectedNode.length;) {
        //获得页面节点对象
        var eOld = document.getElementById("s" + this.obj + this.selectedNode[i]);
        //清除高亮显示 高亮显示className='nodeSel'
        eOld.className = "node";
        //选中节点中间数组删除当前循环到的数组元素。其实永远是第一个即下标为0的数组元素。从左边0开始一直删除。
        this.selectedNode.splice(i, 1);
    }
}

// Toggle Open or close
dTree.prototype.o = function (id) {
    var cn = this.aNodes[id];
    this.nodeStatus(!cn._io, id, cn._ls);
    cn._io = !cn._io;
    if (this.config.closeSameLevel) this.closeLevel(cn);

};

// Open or close all nodes
dTree.prototype.oAll = function (status) {
    for (var n = 0; n < this.aNodes.length; n++) {
        if (this.aNodes[n]._hc && this.aNodes[n].pid != this.root.id) {
            this.nodeStatus(status, n, this.aNodes[n]._ls)
            this.aNodes[n]._io = status;
        }
    }
};

// Opens the tree to a specific node
dTree.prototype.openTo = function (nId, bSelect, bFirst) {
    if (_TREE_DEBUG)alert(nId);
    if (!bFirst) {
        for (var n = 0; n < this.aNodes.length; n++) {
            if (this.aNodes[n].id == nId) {
                nId = n;
                break;
            }
        }
    }

    var cn = this.aNodes[nId];
    if (cn.pid == this.root.id || !cn._p) return;
    cn._io = true;
    cn._is = bSelect;
    if (this.completed && cn._hc) this.nodeStatus(true, cn._ai, cn._ls);
    if (this.completed && bSelect) this.s(cn._ai);
    else if (bSelect) this._sn = cn._ai;
    this.openTo(cn._p._ai, false, true);
};

// Closes all nodes on the same level as certain node
dTree.prototype.closeLevel = function (node) {
    for (var n = 0; n < this.aNodes.length; n++) {
        if (this.aNodes[n].pid == node.pid && this.aNodes[n].id != node.id && this.aNodes[n]._hc) {
            this.nodeStatus(false, n, this.aNodes[n]._ls);
            this.aNodes[n]._io = false;
            this.closeAllChildren(this.aNodes[n]);
        }
    }
}

// Closes all children of a node
dTree.prototype.closeAllChildren = function (node) {
    for (var n = 0; n < this.aNodes.length; n++) {
        if (this.aNodes[n].pid == node.id && this.aNodes[n]._hc) {
            if (this.aNodes[n]._io) this.nodeStatus(false, n, this.aNodes[n]._ls);
            this.aNodes[n]._io = false;
            this.closeAllChildren(this.aNodes[n]);
        }
    }
}

// Change the status of a node(open or closed)
dTree.prototype.nodeStatus = function (status, id, bottom) {
    eDiv = document.getElementById('d' + this.obj + id);
    eJoin = document.getElementById('j' + this.obj + id);
    if (this.config.useIcons) {
        eIcon = document.getElementById('i' + this.obj + id);
        eIcon.src = (status) ? this.aNodes[id].iconOpen : this.aNodes[id].icon;
    }
    eJoin.src = (this.config.useLines) ?
        ((status) ? ((bottom) ? this.icon.minusBottom : this.icon.minus) : ((bottom) ? this.icon.plusBottom : this.icon.plus)) :
        ((status) ? this.icon.nlMinus : this.icon.nlPlus);
    eDiv.style.display = (status) ? 'block' : 'none';
};
//checkbox 多选   modify 5.14 wangwei
dTree.prototype.cc_parent = function (parent_node_ai, select_flag) {
    var node = this.aNodes[parent_node_ai];
    if (!select_flag) {
        var hasOtherChildrenSelected = false;
        for (var i = 0; i < this.selectedNode.length; i++) {
            if (this.aNodes[this.selectedNode[i]].pid == node.id) {
                hasOtherChildrenSelected = true;
                break;
            }
        }
        if (!hasOtherChildrenSelected) {
            this.removeSeletedNode(parent_node_ai);
            document.getElementById("c" + this.obj + node.id).checked = select_flag;
            if (node.pid != -1) this.cc_parent(node._p._ai, select_flag);
        }
    } else {
        this.addSelectedNode(parent_node_ai);
        document.getElementById("c" + this.obj + node.id).checked = select_flag;
        if (node.pid != -1) this.cc_parent(node._p._ai, select_flag);
    }
};

dTree.prototype.cc_children = function (node_ai, select_flag) {
    var node = this.aNodes[node_ai];
    document.getElementById("c" + this.obj + node.id).checked = select_flag;
    if (!select_flag) {
        this.removeSeletedNode(node_ai);
    } else {
        this.addSelectedNode(node_ai);
    }
    if (node._hc) {
        for (var i = parseInt(node_ai) + 1; i < this.aNodes.length; i++) {
            if (this.aNodes[i].pid == node.id) {
                this.cc_children(i, select_flag);
            }
        }
    }

};

dTree.prototype.cc = function (node_ai, parent_node_ai) {
    //首先获取这个多选框的id
    var node = this.aNodes[node_ai];
    var cs = document.getElementById("c" + this.obj + node.id).checked;
    this.cc_children(node_ai, cs);
    this.cc_parent(parent_node_ai, cs);
//    var n;
//    var len = this.aNodes.length;
//
//    for (n = 0; n < len; n++) { //如果循环每一个节点
//        if (this.aNodes[n].pid == nodeId) { //如果选中的是非叶子节点,则要将所有的子节点选择和父节点一样
//            document.getElementById("c" + this.obj + this.aNodes[n].id).checked = cs;
//            this.cc(this.aNodes[n].id, nodeId);
//        }
//    }
//
//    if (cs == true) {  //当前是选中状态
//        var pid = nodePid;
//        var bSearch;
////        node._is=true;//设置选中
//        //    this.addSelectedNode(node._ai);
//        //    alert("!!!!!!!!!!!"+this.aNodes[nodeId]);
//
//        //   this.addSelectedNode(id);
//        do {
//            bSearch = false;
//            for (n = 0; n < len; n++) {  //循环每一个节点
//                if (this.aNodes[n].id == pid) {  //如果循环的节点的id等于PID
//                    document.getElementById("c" + this.obj + pid).checked = true; //那么这个循环的节点应该被选中
//                    pid = this.aNodes[n].pid;
////                    this.aNodes[pid]._is=true;//设置父节点选中
//                    //           this.aNodes[this.aNodes[n]._p._ai]._is=true;
//                    //       alert("@@@@@@@@@@@"+this.aNodes[n]._p._ai)
//                    this.addSelectedNode(this.aNodes[n]._p._ai);
//                    bSearch = true;
//                    break;
//                }
//            }
//        } while (bSearch == true);
//    }
//
//    if (cs == false) {      //如果被取消选择
//        var pid = nodePid;
////        node._is=false;
//        do {
//            for (j = 0; j < len; j++) {         //循环每一个多选框  如果这个节点的子节点有其他是选中的,则不取消
//                if (this.aNodes[j].pid == pid && document.getElementById("c" + this.obj + this.aNodes[j].id).checked == true) {
//                    return;
//                }
//            }
//            if (j == len) {   //循环结束
//                for (k = 0; k < len; k++) {
//                    if (this.aNodes[k].id == pid) {   //如果找到父节点
//                        document.getElementById("c" + this.obj + this.aNodes[k].id).checked = false;
//                        pid = this.aNodes[k].pid;
//                        break;
//                    }
//                }
//            }
//        } while (pid != -1);
//    }
};
// If Push and pop is not implemented by the browser
if (!Array.prototype.push) {
    Array.prototype.push = function array_push() {
        for (var i = 0; i < arguments.length; i++)
            this[this.length] = arguments[i];
        return this.length;
    }
}
if (!Array.prototype.pop) {
    Array.prototype.pop = function array_pop() {
        lastElement = this[this.length - 1];
        this.length = Math.max(this.length - 1, 0);
        return lastElement;
    }
}

/**
 * 基于dtree的angularjs版tree
 *
 * 注意一级节点的父节点ID要为-1
 *
 * example：
 * <div class="tree" uv-tree="funcs" uv-tree-data="funcs" uv-tree-node-id-key="func_code"
 * uv-tree-node-parent-id-key="par_func_code" uv-tree-node-name-key="func_name" uv-tree-node-selected-key="selected"
 * uv-tree-multi-select="true">
 * </div>
 *
 *
 */
angular.module('uv.directive.tree', [])
    .provider('uvTreeConfig', [function () {
        var imgFolder = "./img";
        return {
            setImgFolder: function (imgFolderPath) {
                imgFolder = imgFolderPath;
            },
            $get: function () {
                return {
                    imgFolder: imgFolder
                }
            }
        }
    }])
    .directive('uvTree', ['$timeout', 'uvTreeConfig', function ($timeout, uvTreeConfig) {
        return {
            restrict: 'EA',
            template: '<div></div>',
            scope: {
                uvTreeData: '=',            //tree的源数据
                uvTreeNodeIdKey: '@',       //tree节点的json对象中表示id的key
                uvTreeNodeParentIdKey: '@', //tree节点的json对象中表示父节点ID的key
                uvTreeNodeNameKey: '@',     //tree节点的json对象中表示名称的key
                uvTreeNodeSelectedKey: '@', //tree节点的json对象中表示当前节点应该已被默认选中的key
                uvTreeMultiSelect: '@',     //tree是否支持多选，现在单选有点问题
                uvTreeSelectNodeFunc: '&'   //暂时没用
            },
            link: function ($scope, elem, attr) {
                var treeScopeName = attr.uvTree || ("_tree" + parseInt(Math.random() * 100));
                window[treeScopeName] = new dTree(treeScopeName, uvTreeConfig.imgFolder);
                $scope.$parent[treeScopeName] = window[treeScopeName];
                window[treeScopeName].config.multiSelect = !!$scope.uvTreeMultiSelect;
                window[treeScopeName].config.checkbox = !!$scope.uvTreeMultiSelect;
                window[treeScopeName].config.useIcons = false;
                var id = $scope.uvTreeNodeIdKey,
                    pid = $scope.uvTreeNodeParentIdKey,
                    name = $scope.uvTreeNodeNameKey,
                    selectKey = $scope.uvTreeNodeSelectedKey;
                angular.forEach($scope.uvTreeData, function (v) {
                    window[treeScopeName].add(v[id], v[pid], v[name], '', '', v[selectKey], v, true);
                });
                var treeHtml = window[treeScopeName].toString();
                elem.html(treeHtml);

            }
        }
    }]);